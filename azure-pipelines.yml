# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- trunk

jobs:
- job: build_sdist
  pool: {vmImage: 'ubuntu-latest'}
  steps:
  - {task: UsePythonVersion@0, inputs: {versionSpec: '3.7'}}

  - task: PythonScript@0
    displayName: 'Build environment details'
    inputs:
      scriptPath: ./ci/azure-build.py
      arguments: report-env

  - task: PythonScript@0
    displayName: 'Install dependencies'
    inputs:
      scriptPath: ./ci/azure-build.py
      arguments: install-deps-ubuntu

  - task: PythonScript@0
    displayName: 'Lint cyexiv2'
    inputs:
      scriptPath: ./ci/azure-build.py
      arguments: lint-cyexiv2

  - task: PythonScript@0
    displayName: 'Build libexiv2'
    inputs:
      scriptPath: ./ci/azure-build.py
      arguments: build-libexiv2-ubuntu

  - task: PythonScript@0
    displayName: 'Build and test cyexiv2 (sdist)'
    inputs:
      scriptPath: ./ci/azure-build.py
      arguments: build-and-test-sdist

  - task: PublishTestResults@2
    displayName: 'Upload test results'
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: '**/test-results.xml'
      testRunTitle: 'Test results for Python $(python.version)'

  - task: PublishCodeCoverageResults@1
    displayName: 'Upload test coverage'
    condition: succeededOrFailed()
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '**/coverage.xml'

  - task: PublishPipelineArtifact@1
    displayName: 'Upload built artifacts'
    inputs:
      path: $(System.DefaultWorkingDirectory)/dist
      artifact: sdist

# - job: build_linux_wheels
#   pool: {vmImage: 'ubuntu-latest'}
#   steps:
#   - {task: UsePythonVersion@0, inputs: {versionSpec: '3.7'}}
#
#   - task: PythonScript@0
#     displayName: 'Build and test Linux wheels'
#     inputs:
#       scriptPath: ./ci/azure-build.py
#       arguments: cibw-outer
#
#   - task: PublishPipelineArtifact@1
#       artifact: linux-wheels
#     displayName: 'Upload built artifacts'
#     inputs:
#       path: $(System.DefaultWorkingDirectory)/wheelhouse

- job: build_macos_wheels
  pool: {vmImage: 'macos-latest'}
  steps:
  - {task: UsePythonVersion@0, inputs: {versionSpec: '3.7'}}

  - task: PythonScript@0
    displayName: 'Build and test MacOS wheels'
    inputs:
      scriptPath: ./ci/azure-build.py
      arguments: cibw-outer

  - task: PublishPipelineArtifact@1
    displayName: 'Upload built artifacts'
    inputs:
      path: $(System.DefaultWorkingDirectory)/wheelhouse
      artifact: macos-wheels

- job: build_windows_wheels
  pool: {vmImage: 'vs2017-win2016'}
  steps:
  # on windows we need to do this to get all the necessary versions of
  # python installed
  - {task: UsePythonVersion@0, inputs: {versionSpec: '3.5', architecture: x86}}
  - {task: UsePythonVersion@0, inputs: {versionSpec: '3.5', architecture: x64}}
  - {task: UsePythonVersion@0, inputs: {versionSpec: '3.6', architecture: x86}}
  - {task: UsePythonVersion@0, inputs: {versionSpec: '3.6', architecture: x64}}
  - {task: UsePythonVersion@0, inputs: {versionSpec: '3.7', architecture: x86}}
  - {task: UsePythonVersion@0, inputs: {versionSpec: '3.7', architecture: x64}}

  - task: PythonScript@0
    displayName: 'Build and test Windows wheels'
    inputs:
      scriptPath: ./ci/azure-build.py
      arguments: cibw-outer

  - task: PublishPipelineArtifact@1
    displayName: 'Upload built artifacts'
    inputs:
      path: $(System.DefaultWorkingDirectory)/wheelhouse
      artifact: windows-wheels
